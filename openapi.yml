openapi: "3.0.3"
info:
  title: "MOLO Web Application API"
  version: "1.0.0"
  description: >
    Этот API предоставляет эндпоинты для проверки статуса регистрации менторов и подопечных,
    создания и получения записей менторов.
servers:
  - url: "https://api.molo.by"
    description: "Продакшн сервер"
  - url: "https://dev.api.molo.by"
    description: "Сервер разработки"
  - url: "https://kq61ohxxkg.execute-api.eu-central-1.amazonaws.com/Stage"
    description: "Временный адрес для девелопмента"

paths:
  /registration-status:
    get:
      summary: "Получить статус регистрации"
      description: "Получить текущий статус регистрации для менторов и подопечных."
      responses:
        '200':
          description: "Статус регистрации успешно получен."
          content:
            application/json:
              schema:
                type: object
                properties:
                  mentors:
                    type: boolean
                    description: "Показывает, открыта ли регистрация менторов."
                  mentees:
                    type: boolean
                    description: "Показывает, открыта ли регистрация подопечных."
                example:
                  mentors: true
                  mentees: false

  /mentors:
    post:
      summary: "Создать ментора"
      description: "Зарегистрировать нового ментора."
      requestBody:
        description: "Данные ментора для создания новой записи."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MentorInput"
      responses:
        '201':
          description: "Ментор успешно создан."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mentor"
        '400':
          description: "Предоставлены неверные данные ментора."
    get:
      summary: "Получить всех менторов"
      description: "Получить список всех зарегистрированных менторов. По умолчанию показывает только активных менторов."
      parameters:
        - name: filter
          in: query
          required: false
          description: "Фильтр для менторов. При значении 'all' показывает всех менторов независимо от статуса."
          schema:
            type: string
            enum: ['all']
      responses:
        '200':
          description: "Список менторов успешно получен."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mentor"

  /mentor/{id}:
    get:
      summary: "Получить ментора по ID"
      description: "Получить информацию о конкретном менторе по его идентификатору."
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор ментора"
          schema:
            type: string
      responses:
        '200':
          description: "Ментор успешно найден."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mentor"
        '404':
          description: "Ментор с указанным ID не найден."

  /mentor/{id}/status:
    patch:
      summary: "Обновить статус ментора"
      description: "Изменить статус ментора на активный."
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор ментора"
          schema:
            type: string
      requestBody:
        description: "Новый статус ментора"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: ["active"]
              required:
                - status
      responses:
        '200':
          description: "Статус ментора успешно обновлен."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mentor"
        '404':
          description: "Ментор с указанным ID не найден."

  /donate-link:
    get:
      summary: "Получить ссылку для пожертвований"
      description: "Получить URL для пожертвований."
      responses:
        '200':
          description: "Ссылка для пожертвований успешно получена."
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                    description: "URL для пожертвований."
                example:
                  url: "https://donate.example.com"

  /newsletter-signup:
    post:
      summary: "Подписка на рассылку"
      description: "Подписаться на новостную рассылку."
      requestBody:
        description: "Email адрес для подписки на рассылку."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewsletterSignup"
      responses:
        '200':
          description: "Успешная подписка на рассылку."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Сообщение подтверждения."
                example:
                  message: "Subscription successful."
        '400':
          description: "Предоставлены неверные данные для подписки."

components:
  schemas:
    MentorInput:
      type: object
      description: "Входные данные для создания ментора."
      properties:
        name:
          type: string
          description: "Полное имя ментора."
        email:
          type: string
          format: email
          description: "Email адрес ментора."
        bio:
          type: string
          description: "Краткая информация о менторе."
          nullable: true
        kidTags:
          type: array
          description: "Категории особенностей ребенка, будет расширено."
          nullable: true
          items:
            type: string
            enum: ["kid-down", "kid-autism", "kid-other"]
        partnershipStatus:
          type: string
          description: "Семейное положение ментора."
          nullable: true
          enum: ["couple", "mother", "father", "mother-alone", "father-alone"]
        country:
          type: string
          description: "Страна проживания (ISO 3166-1 alpha-2)"
          pattern: "^[A-Z]{2}$"
          nullable: true
        kidAge:
          type: integer
          description: "Возраст ребенка"
          minimum: 0
          maximum: 100
        telegram:
          type: string
          description: "Имя пользователя в Telegram без символа @"
          pattern: "^[a-zA-Z0-9_]{5,32}$"
          nullable: true
        mentorBirthdate:
          type: string
          format: date
          description: "Дата рождения ментора"
          nullable: true
        kidsBirthday:
          type: string
          format: date
          description: "Дата рождения ребенка"
          nullable: true
      required:
        - name
        - email

    Mentor:
      allOf:
        - $ref: "#/components/schemas/MentorInput"
        - type: object
          properties:
            id:
              type: string
              description: "Уникальный идентификатор ментора."
            calendarUrl:
              type: string
              format: uri
              description: "URL где подопечные могут записаться на встречу"
            firstAvailableSlot:
              type: integer
              description: "Дней до следующего свободного слота. -2 если слотов нет. -1 если неизвестно."
              minimum: -1
            photoUrl:
              type: string
              format: uri
              description: "URL фотографии ментора."
      description: "Запись ментора."

    NewsletterSignup:
      type: object
      description: "Входные данные для подписки на рассылку."
      properties:
        email:
          type: string
          format: email
          description: "Email адрес для подписки."
      required:
        - email
